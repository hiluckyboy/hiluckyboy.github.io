<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo创建文章</title>
      <link href="/2022/04/13/hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/2022/04/13/hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hexo-创建文章以及部署"><a href="#hexo-创建文章以及部署" class="headerlink" title="hexo 创建文章以及部署"></a>hexo 创建文章以及部署</h2><ol><li>首先我们需要创建一片文章用于写作，在根目录下执行命令<code>hexo new post &#39;我的文章&#39;</code>即可。打开根目录下的 source 下的 _post 里面就可以找到创建好的文章。</li><li>头部需要用 — 在上下隔开写配置文件，主要参数如下</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title标题</span><br><span class="line">date建立日期</span><br><span class="line">updated更新日期</span><br><span class="line">tags:   标签</span><br><span class="line"><span class="bullet"> -</span> 标签1</span><br><span class="line"><span class="bullet"> -</span> 标签2</span><br><span class="line">categories: 分类</span><br><span class="line"><span class="bullet"> -</span> 分类1</span><br><span class="line"><span class="bullet"> -</span> 分类2</span><br><span class="line">top: 90 置顶</span><br></pre></td></tr></table></figure><ol start="3"><li>语法什么可以参考<a href="https://hexo.bootcss.com/docs/front-matter.html">hexo</a>官网。</li><li>写完文章之后，就可以部署了，首先执行<code>hexo clean</code>清除之前的打包记录。</li><li>然后执行<code>hexo g</code>进行打包。</li><li>最后执行<code>hexo d</code>部署到线上即可。因为我是部署到 gitee 上的，所以部署完之后需要在 gitee 的仓库上部署一下，进入仓库，点击服务 -&gt; gitee pages -&gt; 更新即可。</li><li>完成~打开自己的网站就看到喽~~~</li><li>忘了说一点<del>.</del> 写完文章之后可以执行<code>hexo s</code>本地查看一下效果~</li></ol><p>撒花✿✿ヽ(°▽°)ノ✿</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单聊聊数组</title>
      <link href="/2020/10/24/arrey/"/>
      <url>/2020/10/24/arrey/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>第一种是使用Array构造函数，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var colors = new Array();</span><br></pre></td></tr></table></figure><p>如果预先知道数组要保存的项目数目，也可以直接给函数传递该数量：<code>var colors = new Array(20)</code>,这个20表示的数组的长度为20；</p><span id="more"></span></li><li><p>第二种是数组字面量表示法，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var colors = [];</span><br></pre></td></tr></table></figure><h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2></li><li><p>对于一个网页或者一个全局作用域而言，使用<code>instanceof</code>就能得到满意的答案；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var colorarr = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">var colorstr = &quot;red&quot;;</span><br><span class="line">console.log(colorarr instanceof Array) // true</span><br><span class="line">console.log(colorstr instanceof Array) // false</span><br></pre></td></tr></table></figure><p>但是，如果从一个框架向另外一个框架传入一个数组，这个方法就不可用了；代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// parent.html</span><br><span class="line">    // html</span><br><span class="line">    &lt;iframe src=&quot;child.html&quot; id=&quot;child&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    // script</span><br><span class="line">    function toChildValue()&#123;</span><br><span class="line">        var arr = [&quot;red&quot;,&quot;blue&quot;];</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">// child.html</span><br><span class="line">    // script</span><br><span class="line">    var getParentVule = window.parent.toChildValue();</span><br><span class="line">    console.log(getParentVule instanceof Array) // false</span><br></pre></td></tr></table></figure><p>所以ECMAScript5新增了Array.isArray()的方法,用这个方法再看上面的值就变成了true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Array.isArray(getParentVule)) // true</span><br></pre></td></tr></table></figure><p>兼容了的浏览器有IE 9+、Firefox 4+、Safari 5+、Opera 10.5+和Chrome。</p><h2 id="转化方法"><a href="#转化方法" class="headerlink" title="转化方法"></a>转化方法</h2><p>调用<code>valueOf()</code>返回的是数组本身，而调用数组的<code>toString()</code>方法会返回由数组中每一个值的字符串形式拼接成的一个以逗号分隔的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">console.log(typeof colors.valueOf()) // object [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]</span><br><span class="line">console.log(typeof colors.toString()) // string  red,blue,green</span><br></pre></td></tr></table></figure><p>在默认情况下，都是以逗号进行分隔的，如果想用不同的符号进行分隔，可以使用<code>join()</code>方法；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(colors.join(&quot;-&quot;)) // red-blue-green</span><br></pre></td></tr></table></figure><h2 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h2><p>向数组末尾添加的方法<code>push()</code>;<br>向数组前端添加的方法<code>unshift()</code>;<br>取出数组末尾项的方法<code>pop()</code>;<br>取出数组第一项的方法<code>shift()</code>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var num = [1,2,3];</span><br><span class="line">// push</span><br><span class="line">num.push(4)</span><br><span class="line">console.log(num) // [1,2,3,4]</span><br><span class="line">// unshift</span><br><span class="line">num.unshift(0)</span><br><span class="line">console.log(num) // [0,1,2,3]]</span><br><span class="line">// pop</span><br><span class="line">var newNum = num.pop();</span><br><span class="line">console.log(num) // [1,2]</span><br><span class="line">console.log(newNum) // 3</span><br><span class="line">// shift</span><br><span class="line">var newNum = num.shift();</span><br><span class="line">console.log(num) // [2,3]</span><br><span class="line">console.log(newNum) // 1</span><br></pre></td></tr></table></figure><h2 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h2><p>重排序的方法有两种，一种是<code>reverse()</code>,一种是<code>sort()</code>。<br><code>reverse()</code>这个方法就很简单了，就是单纯的将数组的反过来；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var num = [1,4,3,2];</span><br><span class="line">num.reverse();</span><br><span class="line">console.log(num);//[2,3,4,1]</span><br></pre></td></tr></table></figure><p>主要说一下<code>sort()</code>方法；<br>默认sort()方法按升序排列数组，此方法会调用每个数组项的<code>toString()</code>转型方法，然后去比较得到的字符串，以确定如何排序。所以此方法会有瑕疵，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var num = [1,5,15,10];</span><br><span class="line">num.sort();</span><br><span class="line">console.log(num); // [1,10,15,5]</span><br></pre></td></tr></table></figure><p>可以看到它会像咱们电脑文件的排序似得，会先排1开始的，如果我们想要一个正常升序的排列方式应该怎么做呢？见下方代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function compare(val1,val2)&#123;</span><br><span class="line">    if(val1 &lt; val2)&#123;</span><br><span class="line">return -1;</span><br><span class="line">    &#125;else if(val1 &gt; val2)&#123;</span><br><span class="line">return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">num.sort(compare);</span><br><span class="line">console.log(num); // [1,5,10,15]</span><br></pre></td></tr></table></figure><p>如果想要实现降序，只需要将判断条件中的±1换个位置即可。因为它是根据正负值算的，所以还有一种简单点的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function compare(val1,val2)&#123;</span><br><span class="line">    return val1 - val2;</span><br><span class="line">&#125;</span><br><span class="line">num.sort(compare);</span><br><span class="line">console.log(num); // [1,5,10,15]</span><br></pre></td></tr></table></figure><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2></li></ol><ul><li>数组的拼接：<code>cancat()</code>,下边列几种拼接的例子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var color = [&quot;red&quot;,&quot;blue&quot;];</span><br><span class="line">var color1 = color.concat(&quot;yellow&quot;);</span><br><span class="line">var color2 = color.concat(&quot;yellow&quot;,[&quot;green&quot;,&quot;gray&quot;]);</span><br><span class="line">console.log(color1); // [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;]</span><br><span class="line">console.log(color2); // [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;]</span><br></pre></td></tr></table></figure></li><li>基于当前数组创建一个或者多个新数组的方法<code>slice()</code>,注意此方法不影响原数组。只传入一个参数时表示从位置为1开始复制，两个参数表示复制从位置为1开始到位置为4的新数组，但是不包括位置是4的那个值。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;];</span><br><span class="line">var color1 = color.slice(1);</span><br><span class="line">var color2 = color.slice(1,4);</span><br><span class="line">console.log(color) // [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;]</span><br><span class="line">console.log(color1) // [&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;]</span><br><span class="line">console.log(color2) // [&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;]</span><br></pre></td></tr></table></figure></li><li>splice方法：这个方法是非常强大的一个方法，可以实现数组的删除、插入、替换。注意此方法会改变原数组。<br>删除：可以删除任意数量的项，只需要2个参数。第一个参数是起始位置，第二个是要删除的项数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;];</span><br><span class="line">var color1 = color.splice(0,2);</span><br><span class="line">console.log(color) // [&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;]</span><br><span class="line">console.log(color1) // [&quot;red&quot;,&quot;blue&quot;];</span><br></pre></td></tr></table></figure>插入：向指定位置插入任意数量的项，需要3个参数：起始位置，0，要插入的项（可以是任意数量）。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;];</span><br><span class="line">color.splice(1,0,&quot;1&quot;,&quot;2&quot;)；</span><br><span class="line">console.log(color) //  [&quot;red&quot;, &quot;1&quot;, &quot;2&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;gray&quot;]</span><br></pre></td></tr></table></figure>替换：替换指定位置的项，需要3个参数：起始位置，要删除的项数、要替换的项（可以是任意数量）。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var color = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;];</span><br><span class="line">color.splice(1,1,&quot;1&quot;);</span><br><span class="line">console.log(color) // [&quot;red&quot;,&quot;1&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;]</span><br><span class="line">color.splice(1,1,&quot;1&quot;,&quot;2&quot;);</span><br><span class="line">console.log(color) // [&quot;red&quot;,&quot;1&quot;,&quot;2&quot;,&quot;yellow&quot;,&quot;green&quot;,&quot;gray&quot;] //删除一项填两项</span><br></pre></td></tr></table></figure><h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2>位置方法有两种，分别是<code>indexOf()</code>和<code>lastIndexOf()</code>;<br><code>indexOf()</code>是从左到右依次查找并返回下标；<br><code>lastIndexOf()</code>是从右到左依次查找并返回下标；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var color = [1,2,3,4,5,4,3,2,1];</span><br><span class="line">var index = color.indexOf(3);</span><br><span class="line">console.log(index) // 2</span><br><span class="line">var index1 = color.lastIndexOf(3);</span><br><span class="line">console.log(index1) // 6</span><br></pre></td></tr></table></figure><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2>我们说五种迭代方法：<br><code>every()</code>:对数组中的每一项运行给定函数，每一项都为true就返回true，有一个为false就返回false；<br><code>filter()</code>:对数组中的每一项运行给定函数，返回为true的项组成的数组；<br><code>forEach()</code>:对数组中的每一项运行给定函数，这个方法没有返回值；<br><code>map()</code>:对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组；<br><code>some()</code>:对数组中的每一项运行给定函数，有一项返回为true，就返回true；<br>下面举一些简单的例子说明：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var num = [1,2,3,4,5,4,3,2,1];</span><br><span class="line">// every</span><br><span class="line">var resultEvery = num.every(function (item,index)&#123;</span><br><span class="line">    return item &gt; 2;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(resultEvery) // false</span><br><span class="line">// some</span><br><span class="line">var resultSome = num.some(function (item,index)&#123;</span><br><span class="line">    return item &gt; 2;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(resultSome) // true</span><br><span class="line">// filter</span><br><span class="line">var resultFilter = num.filter(function (item,index)&#123;</span><br><span class="line">    return item &gt; 2;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(resultFilter) // [3,4,5,4,3]</span><br><span class="line">// map</span><br><span class="line">var resultMap = num.map(function (item,index)&#123;</span><br><span class="line">    return item * 2;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(resultMap) // [2, 4, 6, 8, 10, 8, 6, 4, 2]</span><br><span class="line">// forEach</span><br><span class="line">num.forEach(function (item,index)&#123;</span><br><span class="line">    console.log(item + &quot;-&quot; + index) // 1-0,2-1,...,1-8</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h2>归并方法有两种：<code>reduce()</code>和<code>reduceRight()</code>，这两个方法都会迭代数组的所有项，然后构建一个最终的返回值；不同的地方就是<code>reduce()</code>是从左向右，<code>reduceRight()</code>是从右向左；下面举个<code>reduce()</code>的例子：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var num = [1,2,3,4,5,4,3,2,1];</span><br><span class="line">var val = num.reduce(function(prev,cur)&#123;</span><br><span class="line">    return prev + cur;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(val) // 25</span><br></pre></td></tr></table></figure>关于数组的一些方法就先聊到这0.0</li></ul><!--more-->]]></content>
      
      
      <categories>
          
          <category> JavaScript学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发工具-weflow的简单使用</title>
      <link href="/2020/10/24/weflow/"/>
      <url>/2020/10/24/weflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&amp;ensp;&amp;ensp;最近在网上突然看到了一个神奇的工具–codekit。点开一看，哎呀妈呀，真香，越看越香…直到我下载的时候才发现，居然只有Mac版。想想Mac有的，我大window不应该没有不是，找了半天确实没有-.-~但是，让我发现了另外一个工具–weflow，这个虽然界面看上去比不上codekit，可功能还是挺齐全的么！接下来进入正题0.0</p><span id="more"></span><h2 id="一、界面操作"><a href="#一、界面操作" class="headerlink" title="一、界面操作"></a>一、界面操作</h2><p>界面操作其实很简单，鼠标移入都有提示，添加项目、删除项目、导入项目等等，主要需要说的一点是需要配置路径，点击界面最下边的设置按钮，会弹出配置项，在其中第一项就是设置路径，设置好之后，当你创建项目会自动在当前目录下新建一个<code>WeFlow_workspace</code>文件夹,见下图<br><img src="/image/weflow/weflow-1.jpg" alt="设置"><br>&amp;ensp;&amp;ensp;当项目创建成功之后，会在这个文件夹下生成一个项目目录，里面只有一个src文件夹，只需要将文件夹拖入编辑器，直接编辑即可。开发时只需要点击开发，显示监听中的时候说明开始监听了，也可以点开<code>窗口-调试模式</code>，当你语法发生错误的时候，可以从中查看报错信息；</p><h2 id="二、简单的功能说明"><a href="#二、简单的功能说明" class="headerlink" title="二、简单的功能说明"></a>二、简单的功能说明</h2><p>首先我们可以look一下官网<a href="https://weflow.io/">weflow</a>。<br>官网显示的第一个功能就是less&#x2F;sass的编译，这个功能是非常好用的，点击开发后可以实时编译。至于less&#x2F;sass的语法，可以参考官网<a href="http://lesscss.cn/">less</a>。在这里我可以结合官网给出的第二个功能演示一下，第二个自动给css3样式加前缀的功能，多少可以省点点时间。代码如下：<br>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.test_wrap&#123;display:flex;</span><br><span class="line">    .box&#123;width:100px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.test_wrap&#123;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex&#125;</span><br><span class="line">.test_wrap .box&#123;width:5rem&#125;</span><br></pre></td></tr></table></figure><p>至于编译后，100px -&gt; 5rem 是官网提供的另外一个功能 px -&gt; rem 的兼容适配，打开lib-rem可以看到html的font-size设置的20px；<br>从第二个功能向下是一下图片以及合并的功能，大家可以自己玩一玩。<br>现在看看流程的最后一个功能–ejs模板语法；这个如果玩的溜的话，可是个好东东。我也只是略懂皮毛，但是可以给大家简单的演示一下用法。主要介绍两种用法：<br>一、以下通过js循环实现多个列表，可以通过此方法写多个模块；<br>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;% for(var i=0;i&lt;3;i++)&#123; %&gt;</span><br><span class="line">&lt;li&gt;&lt;%= i %&gt;&lt;/li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;0&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>是不是很方便，接下来，做个升级版：<br>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;% var arr = [</span><br><span class="line">&#123;title:&quot;zc&quot;,age:&quot;18&quot;&#125;,</span><br><span class="line">&#123;title:&quot;ls&quot;,age:&quot;18&quot;&#125;</span><br><span class="line">] %&gt;</span><br><span class="line">//这里有时候会报length错，所以if的代码尽量加上；</span><br><span class="line">&lt;% if(arr)&#123; %&gt;</span><br><span class="line">    &lt;% for(var i=0;i&lt;arr.length;i++)&#123; %&gt;</span><br><span class="line">&lt;li&gt;我叫&lt;%- arr[i].title %&gt;，今年&lt;%- arr[i].age %&gt;&lt;/li&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;我叫zc，今年18&lt;/li&gt;</span><br><span class="line">&lt;li&gt;我叫ls，今年18&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>这样，只需要改数组就可以，不需要找到这个li再去修改了；<br>二、include引入页面<br>这个功能可以将页面的模块分开来做，只需要<code>&lt;%- include(&#39;header&#39;); -%&gt;</code>即可；<br>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%- include(&#x27;box&#x27;); -%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;这是box&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>再来一个升级版：<br>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//index.html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% var title = &quot;box&quot;; %&gt;</span><br><span class="line">&lt;%- include(&#x27;box.html&#x27;,&#123;arr:title&#125;); -%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">//box.html</span><br><span class="line">//这个arr的传值不要用data，不然编译不成功</span><br><span class="line">&lt;% var name = arr; %&gt;</span><br><span class="line">&lt;div&gt;这是&lt;%= name %&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;这是box&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>具体的功能讲的差不多了，还有个小提示，如果点击编译后，发现图片没有复制到dist的目录下的话，可以在img下建个文件夹，将图片放入里面即可；<br>如果你们公司有自己的样式包，可以修改一下他的源码，如下：找到这个文件夹的位置<br><img src="/image/weflow/weflow-2.jpg" alt="文件位置"><br>解压<code>project</code>文件夹之后是一个src目录，进去找到css文件夹，在里面添加自己的样式，之后在<code>style-index.less</code>中<code>import</code>一下，再压缩文件，将压缩文件改成project即可。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
